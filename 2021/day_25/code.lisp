(defun get-input-lines ()
  "Reads lines from file named input.txt"
  (with-open-file (in "input.txt")
    (loop for line = (read-line in nil nil)
          while line
          collect line)))

(defun parse-floor-map (lines)
  (let ((floor-map (make-array (list (length lines) (length (first lines))))))
    (dotimes (row (array-dimension floor-map 0))
      (dotimes (col (array-dimension floor-map 1))
        (setf (aref floor-map row col) (elt (elt lines row) col))))
    floor-map))

(defun clear-destination (floor-map row col)
  (when (eql (aref floor-map row col) #\>)
    ))

(defun east-herd-step (floor-map)
  (let ((to-move NIL))
    (dotimes (row (array-dimension floor-map 0))
      (dotimes (col (array-dimension floor-map 1))
        (if (eql (aref floor-map row col) #\>)
            (if (eql (aref floor-map row (mod (1+ col) (array-dimension floor-map 1))) #\.)
                (push (list row col) to-move)))))
    (dolist (pos to-move)
      (setf (aref floor-map (first pos) (second pos)) #\.)
      (setf (aref floor-map (first pos) (mod (1+ (second pos)) (array-dimension floor-map 1))) #\>))
    (length to-move)))

(defun south-herd-step (floor-map)
  (let ((to-move NIL))
    (dotimes (row (array-dimension floor-map 0))
      (dotimes (col (array-dimension floor-map 1))
        (if (eql (aref floor-map row col) #\v)
            (if (eql (aref floor-map (mod (1+ row) (array-dimension floor-map 0)) col) #\.)
                (push (list row col) to-move)))))
    (dolist (pos to-move)
      (setf (aref floor-map (first pos) (second pos)) #\.)
      (setf (aref floor-map (mod (1+ (first pos)) (array-dimension floor-map 0)) (second pos)) #\v))
    (length to-move)))

(defun simulate (floor-map)
  (do ((moved 1) (i 0 (1+ i)))
      ((eql moved 0) i)
    (setf moved 0)
    (incf moved (east-herd-step floor-map))
    (incf moved (south-herd-step floor-map))))

(print (simulate (parse-floor-map (get-input-lines))))
