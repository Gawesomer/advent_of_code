(defun get-input-lines ()
  "Reads lines from file named input.txt"
  (uiop:read-file-lines "input.txt"))

(defun parse-boards (lines)
  (do ((i 2 (1+ i)) (boards NIL))
      ((>= i (length lines)) boards)
    (push (make-array '(5 5)) boards)
    (dotimes (row 5)
      (dotimes (col 5)
        (setf (aref (nth 0 boards) row col) (parse-integer (nth col (remove "" (cl-utilities:split-sequence #\Space (nth i lines)) :test #'string-equal)))))
      (incf i))))

(defparameter *draw-order* (map 'list #'parse-integer (cl-utilities:split-sequence #\, (first (get-input-lines)))))
(defparameter *boards* (parse-boards (get-input-lines)))

(defun bingo-turn (board num)
  (dotimes (row 5)
    (dotimes (col 5)
      (if (eql (aref board row col) num)
          (setf (aref board row col) NIL)))))

(defun all-the-same (elements)
  (let ((e (first elements)))
        (dotimes (i (length elements))
          (if (not (eql e (nth i elements)))
              (return-from all-the-same NIL))))
    T)

(defun check-row (board n)
  (let ((row NIL))
    (dotimes (i 5)
      (push (aref board n i) row))
    (all-the-same row)))

(defun check-col (board n)
  (let ((col NIL))
    (dotimes (i 5)
      (push (aref board i n) col))
    (all-the-same col)))

(defun check-win (board)
  (dotimes (row 5)
    (if (check-row board row)
        (return-from check-win T)))
  (dotimes (col 5)
    (if (check-col board col)
        (return-from check-win T)))
  NIL)

(defun play-bingo (orders boards)
  (do ((i 0 (1+ i)))
      ((eql i (length orders)) NIL)
    (print (nth i orders))
    (dolist (board boards)
      (bingo-turn board (nth i orders))
      (when (check-win board)
        (print board)
        (return-from play-bingo NIL)))))

(defun loose-bingo (orders boards)
  (do ((i 0 (1+ i)))
      ((eql i (length orders)) NIL)
    (print (nth i orders))
    (dotimes (board-num (length boards))
      (when (nth board-num boards)
        (bingo-turn (nth board-num boards) (nth i orders))
        (when (check-win (nth board-num boards))
          (print (nth board-num boards))
          (setf (nth board-num boards) NIL)
          (if (eql (count NIL boards) (length boards))
              (return-from loose-bingo NIL)))))))

(print *draw-order*)
(print *boards*)
; (play-bingo *draw-order* *boards*)
(loose-bingo *draw-order* *boards*)
