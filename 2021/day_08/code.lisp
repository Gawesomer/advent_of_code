(defun parse-line (line)
  (let ((split-line (cl-utilities:split-sequence #\| line)))
    (list (cl-utilities:split-sequence #\Space (subseq (first split-line) 0 (1- (length (first split-line)))))
          (cl-utilities:split-sequence #\Space (subseq (second split-line) 1)))))

(defun parse-lines ()
  (with-open-file (in "input.txt")
    (loop for line = (read-line in nil nil)
          while line
          collect (parse-line line))))

(defun str-contains (str chars)
  (let ((num-in-common (length chars)))
    (dotimes (i (length chars))
      (if (not (find (elt chars i) str))
          (decf num-in-common)))
    num-in-common))

(defun count-easy-digits (displays)
  (let ((res 0))
    (dolist (display displays)
      (dolist (digit (second display))
        (if (eql 2 (length digit))
            (incf res))
        (if (eql 4 (length digit))
            (incf res))
        (if (eql 3 (length digit))
            (incf res))
        (if (eql 7 (length digit))
            (incf res))))
    res))

(defun determine-n (n digits)
  (if (eql 2 (length n))
      (return-from determine-n 1))
  (if (eql 4 (length n))
      (return-from determine-n 4))
  (if (eql 3 (length n))
      (return-from determine-n 7))
  (if (eql 7 (length n))
      (return-from determine-n 8))
  (let ((one (find-if #'(lambda (d) (eql 2 (length d))) digits)))
    (if (eql 6 (length n))
        (if (eql 2 (str-contains n one))
            (let ((four (find-if #'(lambda (d) (eql 4 (length d))) digits)))
              (if (eql 4 (str-contains n four))
                  (return-from determine-n 9)
                  (return-from determine-n 0)))
            (return-from determine-n 6)))
    (if (eql 5 (length n))
        (if (eql 2 (str-contains n one))
            (return-from determine-n 3)
            (let ((four (find-if #'(lambda (d) (eql 4 (length d))) digits)))
              (if (eql 3 (str-contains four n))
                  (return-from determine-n 5)
                  (return-from determine-n 2)))))))

(defun decode (displays)
  (let ((res 0))
    (dolist (display displays)
      (let ((decoded 0) (i 3))
        (dolist (digit (second display))
          (incf decoded (* (expt 10 i) (determine-n digit (first display))))
          (decf i))
        (incf res decoded)))
    res))

;(print (parse-lines))
;(print (count-easy-digits (parse-lines)))
(print (decode (parse-lines)))
